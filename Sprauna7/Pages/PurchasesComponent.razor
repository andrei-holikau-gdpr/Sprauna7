@page "/purchases"

@using System.Diagnostics.CodeAnalysis;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable

@inject IViewPurchasesUseCase ViewPurchasesUseCase
@inject IDeletePurchaseUseCase DeletePurchaseUseCase

@inject IGetDepartmentDeliveryParcelByIdUseCase GetDepartmentDPByIdUseCase
@inject IGetReceiverByIdUseCase GetReceiverByIdUseCase


<NavLink class="nav-link" href="purchases">
    <span class="oi oi-list-rich" aria-hidden="true"></span> Покупки (@purchases.Count)
</NavLink>
<br/>

@if (purchases != null)
{
    @*<table class="table table-striped table-hover sp-table">*@
    <table id="example" class="display responsive nowrap" style="width:50%">
        <thead>
            <tr>
                <th>Id</th>
                <th></th>
                @*<th></th>
            </tr>
        </thead>*@
                <th>ФИО</th>
                <th>Магазин</th>
                <th>ПВ</th>
                <th>Получатель</th>
                <th>@PurchaseOptions.TrackNumber</th>
                <th>Товары</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in purchases)
            {
                <tr @onclick="@( () => SelectPurchaseId=item.PurchaseId )">
                    <td class="align-middle">
                        <div class="overflow-auto">
                            @item.PurchaseId
                            @*@onclick="@( () => selectPurchaseId=item.PurchaseId )">*@
                        </div>
                    </td>
                    <td>
                        <button type="button" class="btn btn-link"
                            @onclick="@( () => OnClickView(item) )">
                            <i class="bi bi-eye"></i>
                        </button>

                        <button type="button" class="btn btn-link"
                            @onclick="@( () => OnClickEdit(item) )">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        
                        <button type="button" class="btn btn-link"
                            @onclick="@( () => OnClickDelete(item.PurchaseId) )">
                            <i class="bi bi-trash3"></i>
                        </button>
                    </td>
                    
                    <td>

                        @($"{item.Name} {item.Surname}")
                    </td>
                    <td> @item.Shop </td>
                    <td> @GetDepartmentDPAddress(item.DepartmentDeliveryParcelId) </td>
                    <td> @GetReceiverFio(item.ReceiverId)  </td>
                    <td> @item.TrackNumber  </td>
                    <td>
                        @if (item.ProductSps != null)
                        {
                            <ul>
                                @foreach (var prod in item.ProductSps)
                                {
                                    <li>@prod.ProductTypeAndBrand; </li>
                                }
                            </ul>
                        }
                    </td>


                </tr>
               @* @if (MiniView && iMiniCount > MaxCountItems) break;*@
            }
        </tbody>
@*        <tfoot>
            <tr>
                <th>Id</th>
                <th>ФИО</th>
                <th>Магазин</th>
                <th>ПВ</th>
                <th>Получатель</th>
                <th>@PurchaseOptions.TrackNumber</th>

                <th></th>
            </tr>
        </tfoot>*@
    </table>
}
<button type="button" @onclick="OnClickAdd" class="btn btn-primary">Добавить</button>



<Modal @ref="ModalView" IsBackdrop="true" IsKeyboard="true">
    <ModalDialog Title="Информация о покупке" IsDraggable="true" ShowFooter="false">
        <BodyTemplate>
            @if (SelectPurchaseId > 0)
            {
                <ViewPurchaseComponent PurchaseId="@SelectPurchaseId.ToString()" />
            }
        </BodyTemplate>
    </ModalDialog>
</Modal>

<Modal @ref="ModalAdd" IsBackdrop="true" IsKeyboard="true">
    <ModalDialog Title="Добавить покупку" IsDraggable="true" ShowFooter="false">
        <BodyTemplate>
            <AddPurchaseComponent />
        </BodyTemplate>
    </ModalDialog>
</Modal>

<ConsoleLogger @ref="Logger" class="mt-3" />

@code {

    #region Public fields / Parameters

    [Parameter]
    public EventCallback OnSelectedCallback { get; set; }

    #endregion
    // ---
    #region Private fiels Purchase

    [NotNull]
    private ConsoleLogger Logger { get; set; }

    private List<Purchase> purchases;

    public Purchase SelectPurchase;
    private int SelectPurchaseId;

    #endregion
    // ---
    #region Private fields / Modal

    [NotNull]
    private Modal ModalView { get; set; }
    [NotNull]
    private Modal ModalAdd { get; set; }

    #endregion
    // ---
    #region Private methods / Override methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadAll();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JsRuntime.InvokeVoidAsync("InitialiseTable");
    }

    #endregion
    // ---
    #region Private methods

    private void LoadAll()
    {
        purchases = ViewPurchasesUseCase.Execute()?.ToList();
    }

    private string GetDepartmentDPAddress( int departmentId)
    {
        string address = "";
        if(departmentId > 0){
            var department = GetDepartmentDPByIdUseCase.Execute(departmentId);
            if(department != null){
                address = department.Address;
            }
        }
        return address;
    }

    private string GetReceiverFio( int receiverId )
    {
        string fio = "";
        if(receiverId > 0){
            var receiver = GetReceiverByIdUseCase.Execute(receiverId);
            if(receiver != null){
                fio = ReceiverOptions.GetFIO(receiver);
            }
        }
        return fio;
    }

    #endregion
    // ---
    #region Private methods / OnClick CRUD

    private void OnClickView(Purchase single)
    {
        Logger.Log($"OnClickView PurchaseId: {single.PurchaseId}");

        SelectPurchase = single;
        SelectPurchaseId = single.PurchaseId;
        ModalView.Toggle();
    }

    private void OnClickAdd()
    {
        Logger.Log("OnClickView");

        ModalView.Toggle();
        // NavigationManager.NavigateTo($"/add{PurchaseOptions.NameSingle}");
    }

    private void OnClickEdit(Purchase single)
    {
        Logger.Log($"OnClickEdit PurchaseId: {single.PurchaseId}");

        NavigationManager.NavigateTo($"/edit{PurchaseOptions.NameSingle}/{single.PurchaseId}");
    }

    private void OnClickDelete(int id)
    {
        DeletePurchaseUseCase.Delete(id);
        LoadAll();
    }
    
    #endregion
    // ---
    #region Private methods / Async Task

    private Task OnShownCallbackAsync()
    {
        Logger.Log("Logger.Log");
        return Task.CompletedTask;
    }

    private async Task OnSelect()
    {
        Logger.Log("async Task OnSelect()");

        await OnSelectedCallback.InvokeAsync(SelectPurchaseId);
    }

    #endregion
    // ---
    #region Ppublic methods / Interface Implementation IDisposable

    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("DataTablesRemove");
    }

    #endregion

}
