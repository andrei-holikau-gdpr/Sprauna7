@inject NavigationManager NavigationManager

@inject IViewPurchasesUseCase ViewPurchasesUseCase
@inject IDeletePurchaseUseCase DeletePurchaseUseCase


<h2 class="card-title h5">
    <NavLink class="nav-link" href="purchases">
        <span class="oi oi-list-rich" aria-hidden="true"></span> Покупки (@purchases.Count)
    </NavLink>
</h2>

@if (purchases != null)
{
    <table class="table table-striped table-hover sp-table">
        <tbody>
            @foreach (var item in purchases)
            {
                <tr @onclick="@( () => OnSelectedCallback.InvokeAsync( item.PurchaseId ))">
                    <td class="align-middle">
                        <div class="overflow-auto">
                            @item.PurchaseId

                            @*@onclick="@( () => selectPurchaseId=item.PurchaseId )">*@
                        </div>
                    </td>

                    <td class="align-middle">
                        @($"{item.Name} {item.Surname}")
                        <div style="display:none">@(++iMiniCount)</div>
                    </td>     
                    <td>
                        <button type="button" @onclick="@( () => OnClickEdit(item) )"
                        class="btn btn-link">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button type="button" @onclick="@( () => OnClickDelete(item.PurchaseId) )"
                        class="btn btn-link">
                            <i class="bi bi-trash3"></i>
                        </button>
                    </td>
                </tr>
                @*@if (MaxCountItems > 0 && iMiniCount > 1) break;*@
            }
        </tbody>
    </table>
}

<hr/>
@if (selectPurchaseId > 0) {
    <i>selectPurchaseId: @selectPurchaseId</i>
    <hr />
}

@code {

    #region Parameters

    [Parameter]
    public int MaxCountItems { get; set; } = 0;

    [Parameter]
    public EventCallback OnSelectedCallback { get; set; }

    #endregion

    #region public fields

    public int selectPurchaseId { get; set; } = 0;

    #endregion

    #region private fields

    private int iMiniCount { get; set; }

    #endregion


    async Task OnSelect()
    {
        await OnSelectedCallback.InvokeAsync(selectPurchaseId);
    }

    private List<Purchase> purchases;

    #region override methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadAll();
    }

    #endregion

    #region private methods

    private void LoadAll()
    {
        purchases = ViewPurchasesUseCase.Execute()?.ToList();
    }

    private void OnClickEdit(Purchase single)
    {
        NavigationManager.NavigateTo($"/edit{PurchaseOptions.NameSingle}/{single.PurchaseId}");
    }

    private void OnClickDelete(int id)
    {
        DeletePurchaseUseCase.Delete(id);
        LoadAll();
    }

    #endregion
}
