// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plugins.DataStore.SQL;

#nullable disable

namespace Plugins.DataStore.SQL.Migrations
{
    [DbContext(typeof(SpraunaContext))]
    [Migration("20230907151419_CreateIdentitySchema_5")]
    partial class CreateIdentitySchema_5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreBusiness.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Описание 1",
                            Name = "Одежда"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Описание 2",
                            Name = "Обувь"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Описание 3",
                            Name = "Куртка"
                        });
                });

            modelBuilder.Entity("CoreBusiness.CostOfDelivery", b =>
                {
                    b.Property<int>("CostOfDeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CostOfDeliveryId"));

                    b.Property<double>("CostPln")
                        .HasColumnType("float");

                    b.Property<double>("WeightKg")
                        .HasColumnType("float");

                    b.HasKey("CostOfDeliveryId");

                    b.ToTable("CostOfDeliveries");

                    b.HasData(
                        new
                        {
                            CostOfDeliveryId = 1,
                            CostPln = 44.0,
                            WeightKg = 0.5
                        },
                        new
                        {
                            CostOfDeliveryId = 2,
                            CostPln = 63.0,
                            WeightKg = 1.0
                        },
                        new
                        {
                            CostOfDeliveryId = 3,
                            CostPln = 76.0,
                            WeightKg = 2.0
                        },
                        new
                        {
                            CostOfDeliveryId = 4,
                            CostPln = 84.0,
                            WeightKg = 3.0
                        },
                        new
                        {
                            CostOfDeliveryId = 5,
                            CostPln = 114.0,
                            WeightKg = 4.0
                        },
                        new
                        {
                            CostOfDeliveryId = 6,
                            CostPln = 136.0,
                            WeightKg = 5.0
                        },
                        new
                        {
                            CostOfDeliveryId = 7,
                            CostPln = 158.0,
                            WeightKg = 6.0
                        },
                        new
                        {
                            CostOfDeliveryId = 8,
                            CostPln = 181.0,
                            WeightKg = 7.0
                        },
                        new
                        {
                            CostOfDeliveryId = 9,
                            CostPln = 203.0,
                            WeightKg = 8.0
                        },
                        new
                        {
                            CostOfDeliveryId = 10,
                            CostPln = 226.0,
                            WeightKg = 9.0
                        },
                        new
                        {
                            CostOfDeliveryId = 11,
                            CostPln = 248.0,
                            WeightKg = 10.0
                        },
                        new
                        {
                            CostOfDeliveryId = 12,
                            CostPln = 270.0,
                            WeightKg = 11.0
                        },
                        new
                        {
                            CostOfDeliveryId = 13,
                            CostPln = 293.0,
                            WeightKg = 12.0
                        },
                        new
                        {
                            CostOfDeliveryId = 14,
                            CostPln = 315.0,
                            WeightKg = 13.0
                        },
                        new
                        {
                            CostOfDeliveryId = 15,
                            CostPln = 338.0,
                            WeightKg = 14.0
                        },
                        new
                        {
                            CostOfDeliveryId = 16,
                            CostPln = 360.0,
                            WeightKg = 15.0
                        },
                        new
                        {
                            CostOfDeliveryId = 17,
                            CostPln = 382.0,
                            WeightKg = 16.0
                        },
                        new
                        {
                            CostOfDeliveryId = 18,
                            CostPln = 405.0,
                            WeightKg = 17.0
                        },
                        new
                        {
                            CostOfDeliveryId = 19,
                            CostPln = 427.0,
                            WeightKg = 18.0
                        },
                        new
                        {
                            CostOfDeliveryId = 20,
                            CostPln = 450.0,
                            WeightKg = 19.0
                        },
                        new
                        {
                            CostOfDeliveryId = 21,
                            CostPln = 472.0,
                            WeightKg = 20.0
                        },
                        new
                        {
                            CostOfDeliveryId = 22,
                            CostPln = 494.0,
                            WeightKg = 21.0
                        },
                        new
                        {
                            CostOfDeliveryId = 23,
                            CostPln = 517.0,
                            WeightKg = 22.0
                        },
                        new
                        {
                            CostOfDeliveryId = 24,
                            CostPln = 539.0,
                            WeightKg = 23.0
                        },
                        new
                        {
                            CostOfDeliveryId = 25,
                            CostPln = 562.0,
                            WeightKg = 24.0
                        },
                        new
                        {
                            CostOfDeliveryId = 26,
                            CostPln = 584.0,
                            WeightKg = 25.0
                        },
                        new
                        {
                            CostOfDeliveryId = 27,
                            CostPln = 606.0,
                            WeightKg = 26.0
                        },
                        new
                        {
                            CostOfDeliveryId = 28,
                            CostPln = 629.0,
                            WeightKg = 27.0
                        },
                        new
                        {
                            CostOfDeliveryId = 29,
                            CostPln = 651.0,
                            WeightKg = 28.0
                        },
                        new
                        {
                            CostOfDeliveryId = 30,
                            CostPln = 674.0,
                            WeightKg = 29.0
                        },
                        new
                        {
                            CostOfDeliveryId = 31,
                            CostPln = 696.0,
                            WeightKg = 30.0
                        });
                });

            modelBuilder.Entity("CoreBusiness.DepartmentDeliveryParcel", b =>
                {
                    b.Property<int>("DepartmentDeliveryParcelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentDeliveryParcelId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressForMap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GipermallId")
                        .HasColumnType("int");

                    b.Property<int>("Hide")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentDeliveryParcelId");

                    b.HasIndex("RegionId");

                    b.ToTable("DepartmentDeliveryParcels");

                    b.HasData(
                        new
                        {
                            DepartmentDeliveryParcelId = 1,
                            Address = "г.Минск, ул.Ленинская 1",
                            Description = "Режим работы 10:00 - 21:00",
                            GipermallId = 0,
                            Hide = 0,
                            RegionId = 1
                        },
                        new
                        {
                            DepartmentDeliveryParcelId = 2,
                            Address = "г.Могилев, ул.Ленинская 2",
                            Description = "Режим работы 10:00 - 21:00",
                            GipermallId = 0,
                            Hide = 0,
                            RegionId = 2
                        });
                });

            modelBuilder.Entity("CoreBusiness.DirectorySp", b =>
                {
                    b.Property<int>("DirectorySpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DirectorySpId"));

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DirectorySpId");

                    b.ToTable("DirectorySps");
                });

            modelBuilder.Entity("CoreBusiness.FileSp", b =>
                {
                    b.Property<int>("FileSpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileSpId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileNameForFileStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int");

                    b.HasKey("FileSpId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("FileSps");
                });

            modelBuilder.Entity("CoreBusiness.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Created")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Expiration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("PackageId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("CoreBusiness.Package", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCollectivePackage")
                        .HasColumnType("bit");

                    b.Property<string>("NumberPackage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PriceBYN")
                        .HasColumnType("float");

                    b.Property<double>("PricePLN")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("PackageId");

                    b.ToTable("PackageSp");

                    b.HasData(
                        new
                        {
                            PackageId = 1,
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            Description = "",
                            InvoiceId = 0,
                            IsCollectivePackage = false,
                            NumberPackage = "NumberPackage",
                            PriceBYN = 1.0,
                            PricePLN = 1.0,
                            Status = 7,
                            TrackNumber = "TrackNumber",
                            Weight = 1.0
                        });
                });

            modelBuilder.Entity("CoreBusiness.ProductSp", b =>
                {
                    b.Property<int>("ProductSpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductSpId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductTypeAndBrand")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("PurchaseNewId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SbsId")
                        .HasColumnType("int");

                    b.Property<string>("TrackNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlToImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlToProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductSpId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PurchaseNewId");

                    b.ToTable("ProductSps");

                    b.HasData(
                        new
                        {
                            ProductSpId = 1,
                            CategoryId = 1,
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            Description = "Описание 1",
                            Price = 10.99,
                            ProductTypeAndBrand = "Штаны 1 ",
                            PurchaseNewId = 1,
                            Quantity = 10,
                            TrackNumber = "3",
                            UrlToImage = "https://img.freepik.com/free-photo/white-t-shirts-with-copy-space-on-gray-background_53876-104920.jpg?w=1380&t=st=1684705904~exp=1684706504~hmac=fbc3236dbb2840c42a5fb2125297e813c71c158310db8002a147e015a161ff92",
                            UrlToProduct = "https://sprauna.by/"
                        },
                        new
                        {
                            ProductSpId = 2,
                            CategoryId = 1,
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            Description = "Описание 2",
                            Price = 4.9900000000000002,
                            ProductTypeAndBrand = "Майка 2 ",
                            PurchaseNewId = 1,
                            Quantity = 30,
                            TrackNumber = "2",
                            UrlToImage = "https://img.freepik.com/free-photo/white-t-shirts-with-copy-space-on-gray-background_53876-104920.jpg?w=1380&t=st=1684705904~exp=1684706504~hmac=fbc3236dbb2840c42a5fb2125297e813c71c158310db8002a147e015a161ff92",
                            UrlToProduct = "https://sprauna.by/"
                        },
                        new
                        {
                            ProductSpId = 3,
                            CategoryId = 1,
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            Description = "Описание 3",
                            Price = 20.989999999999998,
                            ProductTypeAndBrand = "Кеды 3",
                            PurchaseNewId = 2,
                            Quantity = 20,
                            TrackNumber = "1",
                            UrlToImage = "https://img.freepik.com/free-photo/white-t-shirts-with-copy-space-on-gray-background_53876-104920.jpg?w=1380&t=st=1684705904~exp=1684706504~hmac=fbc3236dbb2840c42a5fb2125297e813c71c158310db8002a147e015a161ff92",
                            UrlToProduct = "https://sprauna.by/"
                        });
                });

            modelBuilder.Entity("CoreBusiness.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<bool>("AgreeWithTools")
                        .HasColumnType("bit");

                    b.Property<int>("CombineParcels")
                        .HasColumnType("int");

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeliveryType")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentDeliveryParcelId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Lock")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SbsTrackId")
                        .HasColumnType("int");

                    b.Property<string>("Shop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("TrackNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Wait")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("DepartmentDeliveryParcelId");

                    b.HasIndex("PackageId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Purchases");

                    b.HasData(
                        new
                        {
                            PurchaseId = 1,
                            AgreeWithTools = true,
                            CombineParcels = 0,
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            DeliveryType = 2,
                            DepartmentDeliveryParcelId = 1,
                            Description = "Покупка 1",
                            Lock = false,
                            Name = "Иван",
                            PackageId = 1,
                            ReceiverId = 1,
                            Shop = "https://allegro.pl/",
                            Surname = "Иванов",
                            TrackNumber = "07.09.2023 15:14:19",
                            Wait = 0
                        },
                        new
                        {
                            PurchaseId = 2,
                            AgreeWithTools = true,
                            CombineParcels = 1,
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            DeliveryType = 2,
                            DepartmentDeliveryParcelId = 1,
                            Description = "Покупка 2",
                            Lock = false,
                            Name = "Иван",
                            PackageId = 1,
                            ReceiverId = 1,
                            Shop = "https://allegro.pl/",
                            Surname = "Новиков",
                            TrackNumber = "07.09.2023 15:14:19",
                            Wait = 0
                        },
                        new
                        {
                            PurchaseId = 3,
                            AgreeWithTools = true,
                            CombineParcels = 1,
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            DeliveryType = 2,
                            DepartmentDeliveryParcelId = 2,
                            Description = "Покупка 2",
                            Lock = false,
                            Name = "Иван",
                            PackageId = 1,
                            ReceiverId = 2,
                            Shop = "https://allegro.pl/",
                            Surname = "Сидоров",
                            TrackNumber = "07.09.2023 15:14:19",
                            Wait = 0
                        });
                });

            modelBuilder.Entity("CoreBusiness.Receiver", b =>
                {
                    b.Property<int>("ReceiverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceiverId"));

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BirthdateForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("Flat")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hide")
                        .HasColumnType("int");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<string>("HouseBuildingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Index")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportDateForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportHumanDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportID")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<DateTime>("PassportIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassportIssuedBy")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PassportScan")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportSeries")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SbsId")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ReceiverId");

                    b.ToTable("Receivers");

                    b.HasData(
                        new
                        {
                            ReceiverId = 1,
                            City = "Минск",
                            Country = "Беларусь",
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            Description = "",
                            FirstName = "Иван",
                            Flat = 1,
                            Hide = 0,
                            House = 1,
                            HouseBuildingNumber = "а",
                            Index = "123123",
                            IsDefault = false,
                            Nationality = "Беларусь",
                            PassportID = "1234567",
                            PassportIssueDate = new DateTime(2023, 9, 7, 18, 14, 19, 258, DateTimeKind.Local).AddTicks(5226),
                            PassportIssuedBy = "Кем выдан 1",
                            PassportScan = "Скан паспорта 1",
                            PassportSeries = "МР",
                            Phone = "+375441112233",
                            Region = "Минская область",
                            SbsId = 0,
                            SecondName = "Иванов",
                            Street = "ул.Ленинская",
                            Surname = "Иванович"
                        },
                        new
                        {
                            ReceiverId = 2,
                            City = "Могилев",
                            Country = "Беларусь",
                            CurrentUserId = "392e95bf-c5e8-42f8-a7fd-eb47b65d71f2",
                            Description = "",
                            FirstName = "Петр",
                            Flat = 2,
                            Hide = 0,
                            House = 2,
                            HouseBuildingNumber = "с",
                            Index = "212000",
                            IsDefault = false,
                            Nationality = "Беларусь",
                            PassportID = "1234567",
                            PassportIssueDate = new DateTime(2023, 9, 7, 18, 14, 19, 258, DateTimeKind.Local).AddTicks(5238),
                            PassportIssuedBy = "Кем выдан 2",
                            PassportScan = "Скан паспорта 2",
                            PassportSeries = "МР",
                            Phone = "+375291122234",
                            Region = "Могилевская область",
                            SbsId = 0,
                            SecondName = "Петров",
                            Street = "ул.Центральная",
                            Surname = "Петрович"
                        });
                });

            modelBuilder.Entity("CoreBusiness.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegionId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            RegionId = 1,
                            Description = "",
                            Name = "Минск"
                        },
                        new
                        {
                            RegionId = 2,
                            Description = "",
                            Name = "Могилев"
                        },
                        new
                        {
                            RegionId = 3,
                            Description = "",
                            Name = "Витебск"
                        },
                        new
                        {
                            RegionId = 4,
                            Description = "",
                            Name = "Гродно"
                        },
                        new
                        {
                            RegionId = 5,
                            Description = "",
                            Name = "Гомель"
                        },
                        new
                        {
                            RegionId = 6,
                            Description = "",
                            Name = "Брест"
                        },
                        new
                        {
                            RegionId = 7,
                            Description = "",
                            Name = "Минская область"
                        },
                        new
                        {
                            RegionId = 8,
                            Description = "",
                            Name = "Могилевская область"
                        },
                        new
                        {
                            RegionId = 9,
                            Description = "",
                            Name = "Витебская область"
                        },
                        new
                        {
                            RegionId = 10,
                            Description = "",
                            Name = "Гродненская область"
                        },
                        new
                        {
                            RegionId = 11,
                            Description = "",
                            Name = "Гомельская область"
                        },
                        new
                        {
                            RegionId = 12,
                            Description = "",
                            Name = "Брестская область"
                        });
                });

            modelBuilder.Entity("CoreBusiness.DepartmentDeliveryParcel", b =>
                {
                    b.HasOne("CoreBusiness.Region", "Region")
                        .WithMany("DepartmentDeliveryParcels")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("CoreBusiness.FileSp", b =>
                {
                    b.HasOne("CoreBusiness.Receiver", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("CoreBusiness.Invoice", b =>
                {
                    b.HasOne("CoreBusiness.Package", "Package")
                        .WithOne("Invoice")
                        .HasForeignKey("CoreBusiness.Invoice", "PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");
                });

            modelBuilder.Entity("CoreBusiness.ProductSp", b =>
                {
                    b.HasOne("CoreBusiness.Category", "Category")
                        .WithMany("ProductSps")
                        .HasForeignKey("CategoryId");

                    b.HasOne("CoreBusiness.Purchase", "Purchase")
                        .WithMany("ProductSps")
                        .HasForeignKey("PurchaseNewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("CoreBusiness.Purchase", b =>
                {
                    b.HasOne("CoreBusiness.DepartmentDeliveryParcel", "DepartmentDeliveryParcel")
                        .WithMany("Purchases")
                        .HasForeignKey("DepartmentDeliveryParcelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBusiness.Package", null)
                        .WithMany("Purchases")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreBusiness.Receiver", "Receiver")
                        .WithMany("Purchases")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentDeliveryParcel");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("CoreBusiness.Category", b =>
                {
                    b.Navigation("ProductSps");
                });

            modelBuilder.Entity("CoreBusiness.DepartmentDeliveryParcel", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("CoreBusiness.Package", b =>
                {
                    b.Navigation("Invoice");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("CoreBusiness.Purchase", b =>
                {
                    b.Navigation("ProductSps");
                });

            modelBuilder.Entity("CoreBusiness.Receiver", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("CoreBusiness.Region", b =>
                {
                    b.Navigation("DepartmentDeliveryParcels");
                });
#pragma warning restore 612, 618
        }
    }
}
