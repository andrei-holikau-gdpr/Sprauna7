@page "/LoggerViewer"

<div class="container">
    <div class="row">

        <div class="col-xl-12">
            <h3>Logger Viewer</h3>
        </div>

        <div class="col-xl-12">           

            <div class="form-floating mb-3">
                <select class="form-select" id="floatingSelect"
                        aria-label="Log files" @onchange="OnChangeLogFile">
                        <option selected></option>
                    @foreach (var item in filesOnlyName)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
                <label for="floatingSelect">Log files</label>
            </div>

            <div class="form-floating mb-3">
                <textarea class="form-control" @bind="@LogBeforeFormatting" 
                    id="floatingTextarea" style="height: 50px"></textarea>
                <label for="floatingTextarea">Log Before Formatting</label>
            </div>

        </div>
        <div class="col-xl-6">

            <div class="form-floating mb-3">
                <input class="form-control" @bind="@TextFilter"></input>
                <label for="floatingTextarea">TextFilter (Default: Sp,)</label>
            </div>

        </div>
        <div class="col-xl-6">

            <div class="form-floating mb-3">
                @NameLoggerFile<br />
                <button class="btn btn-primary align-middle" type="button" id="button-addon1"
                        @onclick="OnClickConvertLog">
                    <i class="bi bi-ui-radios-grid mr-3"></i>
                    <span class="align-middle">middle</span>

                    Log formatting
                </button>
            </div>
        </div>

        <div class="col-xl-12 my-3">
            <div class="form-floating mb-3">
                <textarea class="form-control" @bind="@LogAfterFormatting" id="floatingTextarea" style="height: 200px"></textarea>
                <label for="floatingTextarea">Log After Formatting</label>
            </div>

            <button class="btn btn-outline-secondary mt-3" type="button" id="button-addon1"
                    @onclick="OnClickDeleteAllLogFiles">
                <i class="bi bi-trash3 mr-3"></i>
                Delete all Log files
            </button>
        </div>
    </div>
</div>






@code {

    #region Private Fields

    private string LogFiles = "";
    private string NameLoggerFile = "logger_07.07.2023_10-26.txt";
    private string LogBeforeFormatting = "";
    private string LogAfterFormatting = "";
    private string TextFilter = "\t Sp";
    List<string> filesOnlyName = new();

    #endregion
    // ---
    #region Override Methods

    protected override void OnParametersSet()
    {
        string dirName = Path.Combine(Directory.GetCurrentDirectory(), "logger\\");
        // если папка существует
        if (Directory.Exists(dirName))
        {
            string[] files = Directory.GetFiles(dirName);            

            foreach (var item in files) 
            {
                filesOnlyName.Add(item.Replace(dirName, ""));
            }

            filesOnlyName.Reverse();

            LogFiles = string.Join("\n", filesOnlyName);

            NameLoggerFile = filesOnlyName[0];
        }
    }
    #endregion
    // ---
    #region Private OnClick Methods

    private void OnClickConvertLog()
    {
        LogAfterFormatting = "";

        string[] LogListBeforeFormatting = LogBeforeFormatting.Split("\n",
                            StringSplitOptions.RemoveEmptyEntries);

        foreach (string line in LogListBeforeFormatting)
        {
            Formatting(line);
        }

        StateHasChanged();
    }

    private async void OnChangeLogFile(ChangeEventArgs e)
    {
        if (e != null && e?.Value != null)
        {
#pragma warning disable CS8603
            //todo: #pragma warning disable CS8602

            NameLoggerFile = (string)e.Value;

#pragma warning restore CS8602

            if (string.IsNullOrEmpty(NameLoggerFile))
            {
                LogBeforeFormatting = "";
                LogAfterFormatting = "";
            }
            else
            {
                LogBeforeFormatting = "";
                LogAfterFormatting = "";

                string fullNameLoggerFile = Path.Combine(Directory.GetCurrentDirectory(), "logger\\" + NameLoggerFile);

                // асинхронное чтение
                using (StreamReader reader = new StreamReader(fullNameLoggerFile))
                {
                    string? line;
                    while ((line = await reader.ReadLineAsync()) != null)
                    {
                        LogBeforeFormatting += line + "\n";
                    }
                }
                StateHasChanged();
            }
        }
    }

    private void OnClickFormatting()
    {
        LogAfterFormatting = "";

        List<string> LogList = LogBeforeFormatting.Split("\n").ToList<string>();
        foreach (var item in LogList)
        {
            Formatting(item);
        }
    }

    private void OnClickDeleteAllLogFiles()
    {
        string dirName = Path.Combine(Directory.GetCurrentDirectory(), "logger\\");
        // если папка существует
        if (Directory.Exists(dirName))
        {
            string[] files = Directory.GetFiles(dirName);

            foreach (var filePath in files)
            {
                FileInfo fileInf = new FileInfo(filePath);
                if (fileInf.Exists)
                {
                    fileInf.Delete();
                    // альтернатива с помощью класса File
                    // File.Delete(filePath);
                }
            }

            filesOnlyName.Clear();
            LogFiles = "";
            NameLoggerFile = "";
        }
    }

    #endregion
    // ---
    #region Private Methods

    private void Formatting(string line)
    {
        if (line.Contains(TextFilter))
        {
            LogAfterFormatting += line + "\n";
        }
    }

    #endregion
}