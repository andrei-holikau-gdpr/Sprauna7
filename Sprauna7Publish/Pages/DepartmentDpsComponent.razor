@page "/DepartmentDeliveryParcels"

@using System.Diagnostics.CodeAnalysis;
@using System.Collections.Concurrent;

@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable

@inject IViewDepartmentDpsUseCase ViewDepartmentDeliveryParcelsUseCase
@inject IViewRegionsUseCase ViewRegionsUseCase

@if (!string.IsNullOrEmpty(AlertPrimaryText))
{
    <Alert Icon="fa-solid fa-circle-check" ShowDismiss="true"  Color="Color.Primary" ShowShadow="true">@AlertPrimaryText</Alert>
}

<h1 class="card-title h5">
    <NavLink class="nav-link" href="packages">
        <span class="oi oi-list-rich" aria-hidden="true"></span>
        Пункты выдачи посылок (@departments?.Count)
    </NavLink>
</h1>
<br/>

@if (departments != null)
{
    <table id="example" class="display responsive nowrap" style="width:80%">
        <thead>
            <tr>
                <th>Id</th>
                <th></th>

                <th>Город</th>
                <th>Адрес</th>
                <th>Опиcание</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in departments)
            {
                <tr>
                    <td>
                        @item.DepartmentDeliveryParcelId
                    </td>
                    <td>
                        <Tooltip Placement="Placement.Top" Title="Посмотреть подробнее">
                            <button type="button" class="btn btn-link"
                            @onclick="@( () => OnClickView(item) )">
                                <i class="bi bi-eye"></i>
                            </button>
                        </Tooltip>
                        
                        <Tooltip Placement="Placement.Top" Title="Редактировать">
                            <button type="button" class="btn btn-link"
                                @onclick="@( () => OnClickEdit(item) )">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                        </Tooltip>

                        <Tooltip Placement="Placement.Top" Title="Удалить">
                            <button type="button" class="btn btn-link">

                                <i class="bi bi-trash3"></i>
                            </button>
                        </Tooltip>
                    </td>

                    <td>
                        @if (item.RegionId != null)
                        {
                            @regions?.FirstOrDefault(x => x.RegionId == @item.RegionId)?.Name
                        } 
                        else
                        {
                            <span>РБ</span>
                        }
                    </td>
                    <td>
                        @if (item.Address != null)
                        {
                            @item.Address
                        }
                        else
                        {
                            <span> </span>
                        }
                    </td>

                    <td>
                        @if (item.Description != null)
                        {
                            @item.Description
                        }
                        else
                        {
                            <span> </span>
                        }
                    </td>


                </tr>
            }
        </tbody>
    </table>
}

<button type="button" @onclick="OnClickAdd" class="btn btn-primary">Добавить</button>

<Modal @ref="ModalView" IsBackdrop="true" IsKeyboard="true" >
    <ModalDialog Title="Информация о ПВП" Size="Size.Large" IsDraggable="true" ShowFooter="false" IsScrolling="true">
        <BodyTemplate>
            @if (SelectDepartmentId > 0)
            {
                <ViewDepartmentDp DepartmentId="@SelectDepartmentId.ToString()" />
            }
        </BodyTemplate>
    </ModalDialog>
</Modal>

@* Old 2023-07-09
    <Modal @ref="ModalAdd" IsBackdrop="true" IsKeyboard="true" OnCloseAsync="OnCloseAsync">
    <ModalDialog Title="Добавить ПВП" Size="Size.Large" IsDraggable="true" ShowFooter="false" IsScrolling="true">
        <BodyTemplate>
            <AddDepartmentDp />
        </BodyTemplate>
    </ModalDialog>
</Modal>
*@

<br/>
<br />
<Console Items="@Messages" Height="126" IsAutoScroll="true" />

@code {



    [NotNull]
    private Modal? BackdropModal { get; set; }

    #region Const Department

    private const string OBJECT_NAME_SINGLE = "DepartmentDeliveryParcel";

    #endregion
    // ---
    #region Parameters Department

    #endregion
    // ---
    #region Private fielsDepartment

    [NotNull]
    private string? AlertPrimaryText { get; set; }

    private ConcurrentQueue<ConsoleMessageItem> Messages { get; set; } = new();

    private List<DepartmentDeliveryParcel>? departments;
    private List<Region>? regions;

    public DepartmentDeliveryParcel? SelectDepartment;
    private int SelectDepartmentId = 0;

    #endregion
    // ---
    #region Private fields / Modal

    [NotNull]
    private Modal? ModalView { get; set; }
    [NotNull]
    private Modal? ModalAdd { get; set; }

    #endregion
    // ---
    #region Private methods / Override methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadAll();        
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("InitialiseTable");
            Messages.Enqueue(new ConsoleMessageItem { Message = $"{DateTimeOffset.Now}: OnAfterRenderAsync -> js:InitialiseTable" });
        }
    }



    #endregion
    // ---
    #region Private methods

    private void OnClickAdd()
    {
        ModalAdd.Toggle();
        //NavigationManager.NavigateTo($"/add{OBJECT_NAME_SINGLE}");
    }

    private void LoadAll()
    {
        departments = ViewDepartmentDeliveryParcelsUseCase.Execute()?.ToList();
        regions = ViewRegionsUseCase.Execute()?.ToList();
    }

    private void OnClickEdit(DepartmentDeliveryParcel single)
    {
        NavigationManager.NavigateTo($"/edit{OBJECT_NAME_SINGLE}/{single.DepartmentDeliveryParcelId}");
    }

    //private void OnClickDelete(int id)
    //{
    //    DeleteDepartmentDeliveryParcelUseCase.Delete(id);
    //    LoadAll();
    //}

    #endregion
    // ---
    #region Private methods / OnClick CRUD Department

    private void OnClickView(DepartmentDeliveryParcel single)
    {
        //Logger.Log($"OnClickView PurchaseId: {single.DepartmentDeliveryParcelId}");

        Messages.Enqueue(new ConsoleMessageItem { Message = $"{DateTimeOffset.Now.ToString("T")}: OnClickView() - PurchaseId: {single.DepartmentDeliveryParcelId}" });

        SelectDepartment = single;
        SelectDepartmentId = single.DepartmentDeliveryParcelId;
        ModalView.Toggle();
    }

    #endregion

    private Task OnCloseAsync()
    {
        AlertPrimaryText = "Добавлен новый ПВП";
        Messages.Enqueue(new ConsoleMessageItem { Message = DateTimeOffset.Now.ToString("T") + " OnCloseAsync()" });
        JsRuntime.InvokeVoidAsync("MapRemove");
        return Task.CompletedTask;
    }

    #region Ppublic methods / Interface Implementation IDisposable

    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("DataTablesRemove");
    }

    #endregion

}