@using UseCasesSp.UseCaseInterfaces;

@* //ToDo: Удалить Using  и разобраться почему на работает DI *@ 

@*@page "/addproductSp"*@

@inject NavigationManager NavigationManager
@inject IAddProductSpUseCase AddProductSpUseCase
@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IGetPurchaseByIdUseCase GetPurchaseByIdUseCase
@inject IExistsProductSpByTrackNumberUseCase ExistsProductSpByTrackNumberUseCase

@if (ErrorMessages.Count > 0)
{
    <ErrorMessagesComponent ErrorMessages="ErrorMessages" />
}

@if(productSp != null)
{
    <EditForm Model="productSp" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="container ">
            <div class="row">

                <div class="col-sm-12 col-lg-12 p-1">
                    <div class="form-group">
                        <button type="button" class="btn btn-link" @onclick="OnClickSetDemoData">Заполнить демо данными</button>
                    </div>
                </div>
                <div class="col-sm-12 col-lg-6 p-1">
                    <div class="form-group">
                        <label for="ProductTypeAndBrand">@ProductSpOptions.ProductTypeAndBrand</label>
                        <InputText id="ProductTypeAndBrand" @bind-Value="productSp.ProductTypeAndBrand"
                               class="form-control" ParsingErrorMessage="Необходимо ввести 'Тип товара и марка'"></InputText>
                    </div>
                </div>
                <div class="col-sm-12 col-lg-6 p-1">
                    <div class="form-group">
                        <label for="quantity">@ProductSpOptions.Quantity</label>
                        <InputNumber id="quantity" @bind-Value="productSp.Quantity"
                            class="form-control" Min=1 placeholder="1" ParsingErrorMessage="Необходимо ввести 'Количество'"></InputNumber>
                    </div>
                </div>
                <div class="col-sm-12 col-lg-6 p-1">
                    <div class="form-group">
                        <label for="UrlToProduct">@ProductSpOptions.UrlToProduct</label>
                        <InputText id="UrlToProduct" @bind-Value="productSp.UrlToProduct"
                               class="form-control" placeholder="https://wwww...."></InputText>
                    </div>
                </div>
                <div class="col-sm-12 col-lg-6 p-1">
                    <div class="form-group">
                        <label for="price">@ProductSpOptions.Price</label>
                        <InputNumber id="price" @bind-Value="productSp.Price"
                            @bind-Value:format="F2" class="form-control" Min=0.01 placeholder="0.01"></InputNumber>
                    </div>
                </div>
                <div class="col-sm-12 col-lg-6 p-1">
                    <div class="form-group">
                        <label for="TrackNumber">@ProductSpOptions.TrackNumber</label>
                        <InputText id="TrackNumber" @bind-Value="productSp.TrackNumber" class="form-control"></InputText>
                    </div>
                </div>
               <div class="col-sm-12 col-lg-6 p-1">
                    <div class="form-group">
                        <label for="UrlToImage">@ProductSpOptions.UrlToImage</label>
                        <InputText id="UrlToImage" @bind-Value="productSp.UrlToImage"
                               class="form-control" placeholder="https://wwww...."></InputText>
                    </div>
                </div>

                <input type="hidden" id="PurchaseId" value="@productSp.PurchaseNewId" />
                <input type="hidden" id="CategoryId" value="@productSp.CategoryId" />
                <input type="hidden" id="Description" value="@productSp.Description" />

                <div class="col-sm-12 col-lg-12 p-1">
                    <button type="submit" class="btn btn-primary" @onclick="OnAddCallback" data-bs-dismiss="#addModal">Сохранить</button>
                    <button type="button" class="btn btn-link" data-bs-dismiss="#addModal" data-bs-toggle="modal">Отменить</button>
                </div>
            </div>
        </div>

    </EditForm>
}


@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Inject]
    Microsoft.AspNetCore.Identity.UserManager<ApplicationUser>? userManager { get; set; }

    [Parameter]
    public string? PurchaseId { get; set; }

    [Parameter]
    public EventCallback OnAddCallback { get; set; }

    async Task OnAdd()
    {
        await OnAddCallback.InvokeAsync(productSp);
    }

    #region private fields

    private List<string> ErrorMessages = new();

    private string? currentUserId;

    private ProductSp productSp = new ProductSp();

    // private IEnumerable<Category>? categories;
    // private IEnumerable<Purchase>? purchases;

    private int intPurchaseId;

    #endregion

    #region override methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // categories = ViewCategoriesUseCase.Execute();
    }

    protected override async Task OnInitializedAsync()
    {
#pragma warning disable CS8602
        //todo: #pragma warning disable CS8602
        var user = (await authenticationStateTask).User;

#pragma warning restore CS8602

        if ((user.Identity != null)
            && user.Identity.IsAuthenticated
            && (userManager != null))
        {
            currentUserId = userManager.GetUserId(user);
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (this.PurchaseId == null) NavigationManager.NavigateTo("/");

        if (int.TryParse(this.PurchaseId, out int iPurchaseId))
        {
            intPurchaseId = iPurchaseId;
            Purchase parentPurchase = GetPurchaseByIdUseCase.Execute(iPurchaseId);
            if (parentPurchase == null)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                productSp.PurchaseNewId = iPurchaseId;                
                productSp.CurrentUserId = currentUserId;                
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (productSp != null)
            {
                if (productSp.Quantity == 0) 
                {
                    productSp.Quantity = 1;
                }
                if (productSp.Price == 0)
                {
                    productSp.Price = 1.00;
                }
                if (productSp.CategoryId == null)
                {
                    productSp.CategoryId = 1;
                }
            }
        }
    }

    #endregion

    #region private methods

    private bool RunValidationForSbs()
    {
        ErrorMessages.Clear();

        if (productSp == null)
        {
            ErrorMessages.Add("NoValid. productSp = Null\n");
            //System.Console.WriteLine("NoValid. Purchase = Null");
        } else {
            if (productSp.TrackNumber == null)
            {
                ErrorMessages.Add("Необходимо ввести \"Трек номер\"");
            }
            else
            {
                bool ExistsProductSp = ExistsProductSpByTrackNumberUseCase.Execute(productSp.TrackNumber);
                if (ExistsProductSp)
                {
                    ErrorMessages.Add("Товар с таким трек номером уже существует.");
                }
            }
        }
        return ErrorMessages.Count() > 0 ? false : true;
    }

    private void OnValidSubmit()
    {
        var isValidForSbs = RunValidationForSbs();
        if (isValidForSbs)
        {
            AddProductSpUseCase.Execute(productSp);
            // NavigationManager.NavigateTo($"/{ProductSpOptions.NameMany}");
            productSp = new ProductSp();
            productSp.PurchaseNewId = intPurchaseId;
            productSp.Quantity = 1;
            productSp.Price = 199.00;
        }
    }

    private void OnClickSetDemoData()
    {
        var Quantity = (new Random()).Next(1, 10);
        var Price = Math.Round((new Random()).NextDouble(), 2);
        productSp.ProductTypeAndBrand = "Регулируемые ролики MOVINO CRUZER B2, размер 30–33";
        productSp.Quantity = Quantity;
        productSp.UrlToProduct = @"https://allegro.pl/oferta/rolki-regulowane-movino-cruzer-b2-rozmiar-30-33-13629326595";
        productSp.Price = Quantity * Price;
        productSp.TrackNumber = SpPlugins.SpPluginRandomizer
            .GetRandomCode();
        productSp.UrlToImage = "https://a.allegroimg.com/s512/11a950/e008b96e45c5bf0578fc5d9f9522/Rolki-regulowane-MOVINO-CRUZER-B2-rozmiar-30-33-Marka-Movino";
        
        RunValidationForSbs();
    }

#endregion

}