@page "/editcategory/{CategoryId}"
@inject NavigationManager NavigationManager

@inject IEditCategoryUseCase EditCategoryUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase

<h3>Edit Category </h3>

@if (category != null)
{
    <EditForm Model="category" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
        </div>


        <div class="form-group">
            <label for="description">Описание</label>
            <InputText id="description" @bind-Value="category.Description" class="form-control"></InputText>
        </div>

        <button type="submit" class="btn btn-primary">Сохранить</button>
        <button type="button" class="btn btn-primary" @onclick="OnCancel">Отменить</button>
    </EditForm>
}

@code {

    [Parameter]
    public string? CategoryId { get; set; }

    private Category category = new Category();

    #region override methods

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.CategoryId, out int iCategoryId))
        {
            var tempCategory = GetCategoryByIdUseCase.Execute(iCategoryId);
            this.category = new Category
                {
                    CategoryId =    tempCategory.CategoryId,
                    Name =          tempCategory.Name,
                    Description =   tempCategory.Description
                };
        }
    }

    #endregion

    #region private methods

    private void OnValidSubmit()
    {
        EditCategoryUseCase.Execute(category);
        NavigationManager.NavigateTo("/categories");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/categories");
    }

    #endregion
}
