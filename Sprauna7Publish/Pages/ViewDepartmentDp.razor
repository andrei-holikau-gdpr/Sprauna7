@page "/ViewDepartment/{DepartmentId}"

@using System.Diagnostics.CodeAnalysis

@inject IJSRuntime JsRuntime
@inject IGetDepartmentDpByIdUseCase GetDepartmentByIdUseCase

@implements IDisposable

@if (department != null)
{    
    <h1>
        <span>
            @($"{department.Address}")
        </span>
        <Tooltip Placement="Placement.Right" Title="Обновить карту">
            <button type="button" class="btn btn-link" @onclick="OnClickSearchAddress">
                <i class="bi bi-eye"></i>
            </button>
        </Tooltip>
    </h1>


    <div id="YMapsID-parent">
        <div id="YMapsID"></div>
    </div>
}

<br />
<ConsoleLogger @ref="Logger" class="mt-3" />


@code {
    #region Parameters Department

    [Parameter]
    public string? DepartmentId { get; set; }

    #endregion
    // ---
    #region private fields Department

    [NotNull]
    private ConsoleLogger? Logger { get; set; }

    private DepartmentDeliveryParcel department = new DepartmentDeliveryParcel();


    #endregion
    // ---
    #region override methods Department

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //JsRt = new(JsRuntime);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.DepartmentId, out int iDepartmentId))
        {
            department = GetDepartmentByIdUseCase.Execute(iDepartmentId);
        }
    }

    //protected override void OnAfterRender(bool firstRender)
    //{
    //    Logger.Log($"OnAfterRender DepartmentId: {this.DepartmentId}");

    //    System.Threading.Thread.Sleep(500);

    //    JsRuntime.InvokeVoidAsync("startmap_search", department.AddressForMap);
    //}

    // После того как все элементы DOM веб страницы загружены...
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.Log($"OnAfterRender DepartmentId: {this.DepartmentId}; RegionId: {this.department.RegionId}");

        System.Threading.Thread.Sleep(500);

        await JsRuntime.InvokeVoidAsync("startmap_search", department.AddressForMap);
        

    //    //if (firstRender)
    //    //    await JsRuntime.InvokeVoidAsync("startmap_v2");

    //    // или с возвратом:
    //    // var value = await JSRuntime.InvokeAsync("name_function_javascript");

    //    // return base.OnAfterRenderAsync(firstRender);
    //}

    //protected override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    Logger.Log($"OnAfterRender DepartmentId: {this.DepartmentId}");

    //    return base.OnAfterRenderAsync(firstRender);
    }

    #endregion
    
    private void OnClickSearchAddress()
    {
        JsRuntime.InvokeVoidAsync("startmap_search", department.AddressForMap);
    }

    // ---
    #region Ppublic methods / Interface Implementation IDisposable

    public void Dispose()
    {
        //JsRuntime.InvokeVoidAsync("MapRemove");
    }

    #endregion
}
