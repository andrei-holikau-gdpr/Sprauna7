@inject NavigationManager NavigationManager

@inject IViewDepartmentDpsUseCase ViewDepartmentDeliveryParcelsUseCase
@inject IViewRegionsUseCase ViewRegionsUseCase
@inject IJSRuntime jsRuntime

@*
<h2 class="card-title h5">
    <NavLink class="nav-link" href="packages">
        <span class="oi oi-list-rich" aria-hidden="true"></span>
        Пункты выдачи посылок
    </NavLink>
</h2>
<br/>
*@

@if (departments != null)
{
    <style>
        .selectPvz .dt-buttons{
            display: none;
        }
        .selectPvz .dataTables_filter{
            float:left;
        }
        .selectPvz thead{
            display: none;
        }
    </style>

    <div class="div-for-table selectPvz">
        <table id="example" class="display nowrap">
            <thead>
                <tr>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in departments)
                {
                    <tr @onclick="@(() => OnSelect(item))">
                        <td> @item.Address </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
<br />

<div id="YMapsID-parent" >
    <div id="YMapsID"></div>
</div>
<br />

@if (selectDepartmentId > 0)
{
    <i>selectDepartmentId: @selectDepartmentId</i>
    <hr />
}

<ConsoleLoggerSp Owner="SelectPvz" LogerEnable="@LogerEnable">
    <ConsoleLogger @ref="Logger" />
</ConsoleLoggerSp>

@code {

    #region Parameters

    [Parameter]
    public int selectDepartmentId { get; set; } = 0;

    [Parameter]
    public int MaxCountItems { get; set; } = 1;

    [Parameter]
    public EventCallback<int> OnSelectedCallback { get; set; }

    #endregion

    #region const

    public DepartmentDeliveryParcel? selectPvz;

    private const string OBJECT_NAME_SINGLE = "DepartmentDeliveryParcel";
    //private const string OBJECT_NAME_MANY = "Package";

    #endregion

    #region private fields

    [NotNull]
    private ConsoleLogger? Logger { get; set; }
    private bool LogerEnable = true;

    private List<DepartmentDeliveryParcel>? departments;
    private List<Region>? regions;

    #endregion

    async Task OnSelect(DepartmentDeliveryParcel pvz)
    {
        selectPvz = pvz;
        await OnSelectedCallback.InvokeAsync(pvz.DepartmentDeliveryParcelId);

        System.Threading.Thread.Sleep(500);

        await jsRuntime.InvokeVoidAsync("startmap_search", pvz.AddressForMap);
    }

    #region override methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadAll();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await jsRuntime.InvokeVoidAsync("InitialiseTable");
    }

    #endregion

    #region private methods

    private void LoadAll()
    {
        departments = ViewDepartmentDeliveryParcelsUseCase?.Execute().Where(pvz => pvz.Hide==0).ToList();
        regions = ViewRegionsUseCase?.Execute()?.ToList();

        Logger?.Log($"departments.Count = {departments?.Count()}");
    }

    #endregion
}
