@page "/packages"

@using System.Diagnostics.CodeAnalysis;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable

@inject IViewPackagesUseCase ViewPackagesUseCase
@inject IDeletePackageUseCase DeletePackageUseCase

<h2 class="card-title h5">
    <NavLink class="nav-link" href="packages">
        <span class="oi oi-list-rich" aria-hidden="true"></span> Посылки (@packages?.Count)
    </NavLink>
</h2>

@if (packages != null)
{
    <table id="example" class="display responsive nowrap" style="width:100%">
        <thead>
            <tr>
                <th>Id</th>
                <th></th>
                <th>@ProductSpOptions.ProductTypeAndBrand</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in packages)
            {
                <tr @onclick="@(() => OnSelected(item.PackageId))">
                    <td>@item.PackageId</td>

                    <td>
                        <button type="button" class="btn btn-link"
                            @onclick="@( () => OnClickView(item) )">
                            <i class="bi bi-eye"></i>
                        </button>

                        <button type="button" @onclick="@( () => OnClickEdit(item) )"
                            class="btn btn-link">
                            <i class="bi bi-pencil-square"></i>
                        </button>

                        <button type="button" @onclick="@( () => OnClickDelete(item.PackageId) )"
                            class="btn btn-link">
                            <i class="bi bi-trash3"></i>
                        </button>
                    </td>

                    <td> @item.Name </td>
                
                    <td>
                        
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<button type="button" @onclick="OnClickAdd" class="btn btn-primary">Добавить</button>

<Modal @ref="ModalView" IsBackdrop="true" IsKeyboard="true">
    <ModalDialog Title="@PackageOptions.InformationAboutPackage" IsDraggable="true" ShowFooter="false">
        <BodyTemplate>
            @if (SelectPackageId > 0)
            {
                <ViewPackageComponent PackageId="@SelectPackageId.ToString()" />
            }
        </BodyTemplate>
    </ModalDialog>
</Modal>

<Modal @ref="ModalAdd" IsBackdrop="true" IsKeyboard="true">
    <ModalDialog Title="@PackageOptions.AddPackage" IsDraggable="true" ShowFooter="false">
        <BodyTemplate>
            <AddPackageComponent />
        </BodyTemplate>
    </ModalDialog>
</Modal>

<br/>
<ConsoleLogger @ref="Logger" class="mt-3" />

@code {

    #region Constants Package

    private const string OBJECT_NAME_SINGLE = "Package";
    //private const string OBJECT_NAME_MANY = "Package";

    #endregion
    // ---
    #region Parameters Package

    [Parameter]
    public EventCallback<int> OnSelectedCallback { get; set; }

    #endregion
    // ---
    #region Private fields Package

    [NotNull]
    private ConsoleLogger? Logger { get; set; }

    private List<Package>? packages;

    public Package? SelectPackage;
    private int SelectPackageId;

    #endregion
    // ---
    #region Private fields / Modal

    [NotNull]
    private Modal? ModalView { get; set; }
    [NotNull]
    private Modal? ModalAdd { get; set; }

    #endregion
    // ---
    #region Private methods / Async Task

    async Task OnSelected(int selectPackageId)
    {
        await OnSelectedCallback.InvokeAsync(selectPackageId);
    }

    #endregion
    // ---
    #region Private methods / Override methods

    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadAll();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JsRuntime.InvokeVoidAsync("InitialiseTable");
    }

    #endregion
    // ---
    #region private methods

    private void OnClickAdd()
    {
        NavigationManager.NavigateTo($"/add{OBJECT_NAME_SINGLE}");
    }

    private void LoadAll()
    {
        packages = ViewPackagesUseCase.Execute()?.ToList();
    }

    private void OnClickEdit(Package single)
    {
        NavigationManager.NavigateTo($"/edit{OBJECT_NAME_SINGLE}/{single.PackageId}");
    }

    private void OnClickDelete(int id)
    {
        DeletePackageUseCase.Delete(id);
        LoadAll();
    }

    #endregion
    // ---
    #region Private methods / OnClick CRUD Package

    private void OnClickView(Package single)
    {
        Logger.Log($"OnClickView PurchaseId: {single.PackageId}");

        SelectPackage = single;
        SelectPackageId = single.PackageId;
        ModalView.Toggle();
    }

    #endregion
    // ---
    #region Ppublic methods / Interface Implementation IDisposable

    public void Dispose()
    {
        JsRuntime.InvokeVoidAsync("DataTablesRemove");
    }

    #endregion
}
