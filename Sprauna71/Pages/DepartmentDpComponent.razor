@page "/DepartmentDeliveryParcels"

@using System.Diagnostics.CodeAnalysis;

@*@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

@inject IViewDepartmentDpsUseCase ViewDepartmentDeliveryParcelsUseCase
@inject IViewRegionsUseCase ViewRegionsUseCase*@

@*<h2 class="card-title h5">
    <NavLink class="nav-link" href="packages">
        <span class="oi oi-list-rich" aria-hidden="true"></span> 
        Пункты выдачи посылок (@departments?.Count)
    </NavLink>
</h2>

@if (departments != null)
{
    <table id="example" class="display responsive nowrap" style="width:80%">
        <thead>
            <tr>
                <th>Id</th>
                <th></th>

                <th>Город</th>
                <th>Адрес</th>
                <th>Опиcание</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in departments)
            {
                <tr>
                    <td>
                        @item.DepartmentDeliveryParcelId
                    </td>
                    <td>
                        <button type="button" class="btn btn-link"
                            @onclick="@( () => OnClickView(item) )">
                            <i class="bi bi-eye"></i>
                        </button>

                      <button type="button" class="btn btn-link"
                            @onclick="@( () => OnClickEdit(item) )">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        
                        <button type="button" class="btn btn-link">
                            
                            <i class="bi bi-trash3"></i>
                        </button>                    
                    </td>

                    <td> @regions?.FirstOrDefault(x => x.RegionId == @item.RegionId)?.Name </td>
                    <td> @item.Address </td>

                    <td> @item.Description </td>


                </tr>
            }
        </tbody>
    </table>
}

<button type="button" @onclick="OnClickAdd" class="btn btn-primary">Добавить</button>
*@

<Modal @ref="BackdropModal" IsBackdrop="true" IsKeyboard="true">
    <ModalDialog Title="ModalsIsBackdropToClose" IsDraggable="true" ShowFooter="false">
        <BodyTemplate>
            <div>ModalsTitlePopupWindowText</div>
        </BodyTemplate>
    </ModalDialog>
</Modal>

<Button OnClick="() => BackdropModal.Toggle()">ModalsNormalPopups</Button>



@*<Modal @ref="ModalView" IsBackdrop="true" IsKeyboard="true">
    <ModalDialog Title="Информация о ПВП" IsDraggable="true" ShowFooter="false">
        <BodyTemplate>
            jkgjh
        </BodyTemplate>
    </ModalDialog>
</Modal>

<Modal @ref="ModalAdd" IsBackdrop="true" IsKeyboard="true">
    <ModalDialog Title="Добавить ПВП" IsDraggable="true" ShowFooter="false">
        <BodyTemplate>
            <AddDepartmentDpComponent />

                         @if (SelectDepartmentId > 0)
            {
                <ViewDepartmentDpComponent DepartmentId="@SelectDepartmentId.ToString()" />
            }

        </BodyTemplate>
    </ModalDialog>
</Modal>

<br/>
<ConsoleLogger @ref="Logger" class="mt-3" />*@

@code {

    [NotNull]
    private Modal? BackdropModal { get; set; }

    //#region Const Department

    //private const string OBJECT_NAME_SINGLE = "DepartmentDeliveryParcel";

    //#endregion
    //// ---
    //#region Parameters Department

    //#endregion
    //// ---
    //#region Private fielsDepartment

    //[NotNull]
    //private ConsoleLogger? Logger { get; set; }

    //private List<DepartmentDeliveryParcel>? departments;
    //private List<Region>? regions;

    //public DepartmentDeliveryParcel? SelectDepartment;
    //private int SelectDepartmentId = 0;

    //#endregion
    //// ---
    //#region Private fields / Modal

    //[NotNull]
    //private Modal? ModalView { get; set; }
    //[NotNull]
    //private Modal? ModalAdd { get; set; }

    //#endregion
    //// ---
    //#region Private methods / Override methods

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();
    //    LoadAll();
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //        await JSRuntime.InvokeVoidAsync("InitialiseTable");
    //}

    //public void Dispose()
    //{
    //    JSRuntime.InvokeVoidAsync("DataTablesRemove");
    //}

    //#endregion
    //// ---
    //#region Private methods

    //private void OnClickAdd()
    //{
    //    NavigationManager.NavigateTo($"/add{OBJECT_NAME_SINGLE}");
    //}

    //private void LoadAll()
    //{
    //    departments = ViewDepartmentDeliveryParcelsUseCase.Execute()?.ToList();
    //    regions = ViewRegionsUseCase.Execute()?.ToList();
    //}

    //private void OnClickEdit(DepartmentDeliveryParcel single)
    //{
    //    NavigationManager.NavigateTo($"/edit{OBJECT_NAME_SINGLE}/{single.DepartmentDeliveryParcelId}");
    //}

    ////private void OnClickDelete(int id)
    ////{
    ////    DeleteDepartmentDeliveryParcelUseCase.Delete(id);
    ////    LoadAll();
    ////}

    //#endregion
    //// ---
    //#region Private methods / OnClick CRUD Department

    //private void OnClickView(DepartmentDeliveryParcel single)
    //{
    //    Logger.Log($"OnClickView PurchaseId: {single.DepartmentDeliveryParcelId}");

    //    SelectDepartment = single;
    //    SelectDepartmentId = single.DepartmentDeliveryParcelId;
    //    ModalView.Toggle();
    //}

    //#endregion

}